"""
Django settings for pythia project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

from importlib import import_module
from pathlib import Path
import sys

from decouple import config, Csv, Choices

BASE_DIR = Path(__file__).resolve().parent.parent.parent
sys.path.append(str(BASE_DIR / 'apps'))

USE_SHIBBOLETH = config("USE_SHIBBOLETH", default=False, cast=bool)

# Application definition

INSTALLED_APPS = [
    'core.apps.CoreConfig',  # has to be first as it overrides some templates
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'rest_framework',
    "rest_framework.authtoken",
    'compressor',
    'mptt',
    'aleph.apps.AlephConfig',
    'bookrank.apps.BookrankConfig',
    'psh.apps.PshConfig',
    'hits.apps.HitsConfig',
    'candidates.apps.CandidatesConfig',
    'source_data.apps.SourceDataConfig',
]

DISABLE_CACHALOT = config('DISABLE_CACHALOT', cast=bool, default=False)
if not DISABLE_CACHALOT:
    INSTALLED_APPS.append('cachalot')
else:
    print('cachalot disabled', file=sys.stderr)

MIDDLEWARE = [
    # 'core.middleware.ServerOnlyUpdateCacheMiddleware',  # for caching
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

if USE_SHIBBOLETH:
    MIDDLEWARE += [
        "extmaillogin.middleware.ExternalEmailAuthenticationMiddleware",
    ]

MIDDLEWARE += [
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',  # for caching
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ]
        },
    }
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='pythia'),
        'USER': config('DB_USER', default='pythia'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', cast=int, default=5432),
        'ATOMIC_REQUESTS': True,
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

SITE_ID = 1

# Custom user model
AUTH_USER_MODEL = 'core.User'

# Email
ADMINS = config('ADMINS', cast=Csv(cast=Csv(post_process=tuple), delimiter=';'), default='')
EMAIL_SUBJECT_PREFIX = config('EMAIL_SUBJECT_PREFIX', default='[Pythia] ')
SERVER_EMAIL = config('SERVER_EMAIL', default='root@localhost')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='root@localhost')

# authentication
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
REST_SESSION_LOGIN = True  # do not create standard django session login on rest login
ACCOUNT_ADAPTER = 'core.account.PythiaAccountAdapter'


def extract_email_from_shibboleth(middleware, request):
    print("extract_email_from_shibboleth", request.META, file=sys.stderr)
    print('HTTP_X_AUTH_MAIL', request.META.get('HTTP_X_AUTH_MAIL', ''), file=sys.stderr)
    print('HTTP_X_MAIL', request.META.get('HTTP_X_MAIL', ''), file=sys.stderr)
    return request.META.get('HTTP_X_AUTH_MAIL') or request.META.get('HTTP_X_MAIL')


if USE_SHIBBOLETH:
    # EXT_AUTH_EMAIL_HEADER = config("AUTH_EMAIL_HEADER", default="HTTP_X_MAIL")
    EXT_AUTH_EMAIL_EXTRACTOR = extract_email_from_shibboleth
    AUTHENTICATION_BACKENDS = ["extmaillogin.auth_backends.ExternalEmailAuthBackend"]
else:
    # Following is added to enable registration with email instead of username
    AUTHENTICATION_BACKENDS = (
        "django.contrib.auth.backends.ModelBackend",
        "allauth.account.auth_backends.AuthenticationBackend",
    )

# other django stuff
MAILGUN_API_KEY = config('MAILGUN_API_KEY', default='')
if MAILGUN_API_KEY:
    # if we have the mailgun api key, we activate mailgun
    INSTALLED_APPS += ['anymail']
    EMAIL_BACKEND = 'anymail.backends.mailgun.EmailBackend'
    ANYMAIL = {
        'MAILGUN_API_KEY': MAILGUN_API_KEY,
        'MAILGUN_SENDER_DOMAIN': config('MAILGUN_SENDER_DOMAIN', default='mg.bigdigdata.com'),
        'MAILGUN_API_URL': config('MAILGUN_API_URL', default='https://api.eu.mailgun.net/v3'),
    }

# Pythia configuration options
SUBJECT_CATEGORY_DEFAULT_ROOT = config('DEFAULT_SUBJECT_TAXONOMY_ROOT', default='PSH-ROOT')
COVER_IMAGE_TEMPLATE = config('COVER_IMAGE_TEMPLATE', default='')
# the following work categories will not be imported from Aleph
DISALLOWED_WORK_CATEGORIES = config('DISALLOWED_WORK_CATEGORIES', default='', cast=Csv())
# which function in bookrank.logic.topics should be used to extract work category from aleph data
WORK_CATEGORY_EXTRACTOR = config('WORK_CATEGORY_EXTRACTOR', default='marc_work_category')
CATALOG_DATE_FORMAT = config(
    'CATALOG_DATE_FORMAT', default='yymmdd', cast=Choices(['yymmdd', 'yyddmm'])
)
CATALOG_DATE_FORMAT_FUNCTION = None
ORGANIZATION = config('ORGANIZATION', default='')
ALEPH_IGNORE_FUNCTION = None  # takes AlephEntry and returns True to ignore, False to pass

if ORGANIZATION:
    try:
        org_mod = import_module(f".organization.{ORGANIZATION.lower()}", package="config.settings")
    except ImportError as exc:
        print('Could not import organization specific module:', exc, file=sys.stderr)
    else:
        for name in dir(org_mod):
            if name.isupper() and not name.startswith('__'):
                locals()[name] = getattr(org_mod, name)

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Europe/Prague'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = str(BASE_DIR / 'media/')

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)
STATIC_ROOT = config('STATIC_ROOT', default=str(BASE_DIR / "static_compiled"))

# REST framework

REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',),
    'DEFAULT_AUTHENTICATION_CLASSES': ('rest_framework.authentication.SessionAuthentication',),
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    # 'PAGE_SIZE': 10
}
REST_AUTH_SERIALIZERS = {
    'PASSWORD_RESET_SERIALIZER': 'core.serializers.PythiaPasswordResetSerializer'
}

# caching

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": config('REDIS_URL', default="redis://127.0.0.1:6379/1"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "COMPRESSOR": "django_redis.compressors.lz4.Lz4Compressor",
        },
        "VERSION": 2,
    }
}
CACHE_MIDDLEWARE_SECONDS = 24 * 60 * 60

# logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {'console': {'level': 'DEBUG', 'class': 'logging.StreamHandler'}},
    'loggers': {
        'django.db': {'level': 'INFO'},
        'elasticsearch': {'level': 'ERROR'},
        'urllib3': {'level': 'ERROR'},
    },
    'root': {'level': 'DEBUG', 'handlers': ['console']},
}

# hopefully temporary hacks
SILENCED_SYSTEM_CHECKS = ['postgres.E003']

# instance configuration
# django stuff
SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', cast=bool, default=False)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv(), default='')

# other django stuff
SLACK_TOKEN = config('SLACK_TOKEN', default='')

# default WorkCategory
DEFAULT_WORK_CATEGORY_NAME = 'Book'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/releases/3.2/#customizing-type-of-auto-created-primary-keys
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

#
EXTRA_ALEPH_FIELDS = config('EXTRA_ALEPH_FIELDS', default='', cast=Csv())

VUFIND_URL = config('VUFIND_URL', default='')

DEFAULT_SCHEMAS = 'psh, konspekt'
SUBJECT_SCHEMAS = config('SUBJECT_SCHEMAS', default=DEFAULT_SCHEMAS, cast=Csv())

DEFAULT_WORKCOPIES_FIELDMAP = 'price__f, acquisition_date__d'
WORKCOPIES_FIELDMAP = config('WORKCOPIES_FIELDMAP', default=DEFAULT_WORKCOPIES_FIELDMAP, cast=Csv())

EXPORTED_SETTINGS = ['VUFIND_URL', 'SUBJECT_SCHEMAS', 'USE_SHIBBOLETH']
